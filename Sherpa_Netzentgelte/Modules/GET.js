/*	The helloWorld() function can be executed from any of your project's server-side JavaScript file using the require() method as follows:	var result = require('GET').helloWorld();	For more information, refer to http://doc.wakanda.org/Wakanda Studio0.Beta/help/Title/en/page3355.html*/exports.helloWorld = function helloWorld () {	return ('Hello world');};	exports.get_gas = function get_gas(my_plz, my_stichtag, my_druckstufe, my_ka, my_ml, my_leistung, my_verbrauch, my_zaehlergroesse, my_zaehlertyp) {		var prefix ='ax23:';    var x = ds.Parameter.all().first();    var proxy = {};        if (x.use_proxy) {        proxy = {            host: x.proxy_user + ":" + x.proxy_passwort + "@" + x.proxy_url,            port: x.proxy_port        };    };    var c = 0;    var ret = [];       try {        for (var k = 0; k < my_plz.length; k++) {			if (my_ml) {			var ml2='1'		} else {			var ml2='0';		};					if (my_zaehlergroesse=='') {			my_zaehlergroesse='0';		};					var my_year = my_stichtag.getFullYear();			var my_month = (my_stichtag.getMonth()+1)+'';			if (my_month.length==1) { my_month='0'+my_month};			var my_day=my_stichtag.getDate()+'';			if (my_day.length==1) { my_day='0'+my_day};			var my_tag=my_year+"-"+my_month+"-"+my_day+"T00:00:00";			            var my_call = '<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope" ' + 'xmlns:en="http://entgeltservice.gas.services.common.getag.com">' + '<SOAP-ENV:Header/>' + '<SOAP-ENV:Body>' + '<en:getEntgelteMitNetzbetreiberDaten>' + '<en:rec>' + '<auth_LoginName>' + x.get_user + '</auth_LoginName>' + '<auth_Passwort>' + x.get_passwort + '</auth_Passwort>' + '</en:rec>' + '<en:param>' + '<anzahlZsAbrechnung>0</anzahlZsAbrechnung>' + '<dvgw_id/>' + '<iln/>' + '<druckstufe>' + my_druckstufe + '</druckstufe>' + '<konzessionsabgabe>' + my_ka + '</konzessionsabgabe>' + '<leistung>' + my_leistung + '</leistung>' + '<mitLeistungsmessung>' + ml2 + '</mitLeistungsmessung>' + '<plz>' + my_plz[k] + '</plz>' + '<stichtag>' + my_tag+ '</stichtag>' + '<verbrauch>' + my_verbrauch + '</verbrauch>' + '<zaehlergroesse>' + my_zaehlergroesse + '</zaehlergroesse>' + '<zeahlertyp>' + my_zaehlertyp + '</zeahlertyp>' + '</en:param>' + '</en:getEntgelteMitNetzbetreiberDaten>' + '</SOAP-ENV:Body>' + '</SOAP-ENV:Envelope>';            var mp = {};            var mfound = {};            if (x.use_proxy) {            	var mp = new XMLHttpRequest(proxy)            	} else {                        var mp = new XMLHttpRequest();            };            mp.open('POST', x.ws_endpoint_gas, true, "", "");            mp.send(my_call);                  	            if ((mp.status == 200) && (mp.readyState = 4)) {                var test = mp.responseText;                var temp = XmlToJSON(test, "json-bag", "");                var temp = temp.replace('getEntgelteMitNetzbetreiberDatenResponse', 'getEntResponse');                var mobj = JSON.parse(temp);                var antw = mobj['soapenv:Body'][0]['ns:getEntResponse'][0]['ns:return'];                for (var i = 0; i < antw.length; i++) {                    var op = antw[i];                    var entgeltobj = {};                    entgeltobj.bdew = extract(op, 'dvgwid13',prefix);                    if (entgeltobj.bdew != undefined) {                    entgeltobj.netzbetreibername = extract(op, 'netzbetreibername',prefix);                    entgeltobj.druckstufe = ['unbstimmt', 'Niederdruck', 'Mitteldruck', 'Hochdruck'][extract(op, 'druckstufe',prefix)];                    entgeltobj.gueltig_von = new Date(extract(op, 'gueltig_von',prefix));                    entgeltobj.gueltig_bis = new Date(extract(op, 'gueltig_bis',prefix));                    entgeltobj.mitLeistungsmessung = extract(op, 'mitLeistungsmessung',prefix);                    entgeltobj.leistung = extract(op, 'leistung',prefix);                    entgeltobj.grundpreis = extract(op, 'grundpreis',prefix);                    entgeltobj.wirkarbeit = extract(op, 'wirkarbeit',prefix);                    entgeltobj.konzessionsabgabe = extract(op, 'konzessionsabgabe',prefix);                    var regelcount=extract(op,'regelenergieumlageCount',prefix);                    if (regelcount !='0') {                    	var temp2 = op[prefix+'regelenergieumlage'];                        entgeltobj.regelenergieumlage = extract(temp2[0], 'wert',prefix);                    }                    else entgeltobj.regelenergieumlage = 0;                    entgeltobj.grundpreis = extract(op, 'grundpreis',prefix);                    entgeltobj.abrechnung = extract(op, 'entgelt_fuer_abrechnung',prefix);                    entgeltobj.msb = extract(op, 'entgelt_fuer_einbau_betrieb_wartung_messtechnik',prefix);                    entgeltobj.mdl = extract(op, 'entgelt_fuer_messung_und_ablesung',prefix);                    entgeltobj.zaehlertyp = extract(op, 'zaehlertyp',prefix);                    switch (entgeltobj.zaehlertyp) {                    case '1':                        entgeltobj.zaehlertyp = "Balgengas";                        break;                    case '2':                        entgeltobj.zaehlertyp = "Drehkolben";                        break;                    case '3':                        entgeltobj.zaehlertyp = "Turbinenrad";                        break;                    case '4':                        entgeltobj.zaehlertyp = "Ultraschall";                        break;                    case '5':                        entgeltobj.zaehlertyp = "SmartMeter";                        break;                    case '10':                        entgeltobj.zaehlertyp = "keine Angabe";                        break;                    };                    entgeltobj.zaehlergroesse_von = extract(op, 'zaehlergroesse_von',prefix);                    entgeltobj.zaehlergroesse_bis = extract(op, 'zaehlergroesse_bis',prefix);                    entgeltobj.gesamtpreis = (Math.round(extract(op, 'gesamtpreis',prefix) * 100)) / 100;                    entgeltobj.plz = my_plz[k];                    ret.push(entgeltobj);                                     c++;                    };                };            };        }; 		    }    catch (error) {        ret = []    };      return ret;};exports.get_strom = function get_strom(my_plz, my_stichtag, my_sp_ent, my_sp_mess, my_leistung, my_verbrauch_HT, my_verbrauch_NT, my_blindmehrarbeit, my_zaehlerart, my_datenbereit, my_entgelt) {     var prefix = 'ax21:';        var x = ds.Parameter.all().first();    var proxy = {};    if (x.use_proxy) {        proxy = { // define a proxy only if necessary            host: x.proxy_user + ":" + x.proxy_passwort + "@" + x.proxy_url,            // use any valid proxy address            port: x.proxy_port        };    };    var c = 0;    var ret = [];    try {    	    		var my_year = my_stichtag.getFullYear();			var my_month = (my_stichtag.getMonth()+1)+'';			if (my_month.length==1) { my_month='0'+my_month};			var my_day=my_stichtag.getDate()+'';			if (my_day.length==1) { my_day='0'+my_day};			var my_tag=my_year+"-"+my_month+"-"+my_day;    	// create a progress indicator object and open the session			var prog = ProgressIndicator(my_plz.length, "{curValue} von {maxValue} Postleitzahlen", false, "", "stromProg");    		    	        for (var k = 0; k < my_plz.length; k++) {		prog.setValue(k+1);		         var my_call='<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope" '+    'xmlns:en="http://entgeltservice.strom.services.common.getag.com">'+    '<SOAP-ENV:Header/>'+    '<SOAP-ENV:Body>'+        '<en:getEntgelteMitNetzbetreiberDaten>'+            '<en:rec>'+            	'<auth_LoginName>'+x.get_user+'</auth_LoginName>'+            	'<auth_Passwort>'+x.get_passwort+'</auth_Passwort>'+            '</en:rec>'+            '<en:param>'+                '<anzahlZsAbrechnung>0</anzahlZsAbrechnung>'+            	'<spannungsEbeneEntnahme>'+my_sp_ent+'</spannungsEbeneEntnahme>'+            	'<vdewid13/>'+              	'<lvg>'+0+'</lvg>'+             	'<gkz/>'+'<mdl/>'+'<msb/>'+                	'<versorgerKennung>'+1+'</versorgerKennung>'+            	'<spannungsEbeneMessung>'+my_sp_mess+'</spannungsEbeneMessung>'+            	'<konzessionsabgabe>'+5+'</konzessionsabgabe>'+            	'<leistung>'+my_leistung+'</leistung>'+            	'<verbrauchGrenzeBisIgnorieren>'+0+'</verbrauchGrenzeBisIgnorieren>'+            	'<plz>'+my_plz[k]+'</plz>'+            	'<stichtag>'+my_tag+'</stichtag>'+            	'<verbrauchHT>'+my_verbrauch_HT+'</verbrauchHT>'+            	'<verbrauchNT>'+my_verbrauch_NT+'</verbrauchNT>'+            	'<blindmehrarbeit>'+my_blindmehrarbeit+'</blindmehrarbeit>'+            	'<datenbereitstellung>'+my_datenbereit+'</datenbereitstellung>'+            	'<zeahlerart>'+my_zaehlerart+'</zeahlerart>'+            	'<entgelttyp>'+my_entgelt+'</entgelttyp>'+            '</en:param>'+        '</en:getEntgelteMitNetzbetreiberDaten>'+    '</SOAP-ENV:Body>'+'</SOAP-ENV:Envelope>';            var mp = {};            var mfound = {};			if (x.use_proxy) {            	var mp = new XMLHttpRequest(proxy)            	} else {                        var mp = new XMLHttpRequest();            };            mp.open('POST', x.ws_endpoint_strom, true, "", "");            mp.send(my_call);            if ((mp.status == 200) && (mp.readyState = 4)) {                var test = mp.responseText;                var temp = XmlToJSON(test, "json-bag", "");                var temp = temp.replace('getEntgelteMitNetzbetreiberDatenResponse', 'getEntResponse');                var temp = temp.replace(prefix,'');                var mobj = JSON.parse(temp);                var antw = mobj['soapenv:Body'][0]['ns:getEntResponse'][0]['ns:return'];                for (var i = 0; i < antw.length; i++) {                    var op = antw[i];                    var entgeltobj = {};                    entgeltobj.fehlerCode = extract(op, 'fehlerCode',prefix);                    if (entgeltobj.fehlerCode == '1') {                    	var temp1 = extractObj(op,'entgeltInformationen',prefix)[0];                    	var temp2 = extractObj(temp1,'versorgerInformationen',prefix)[0];                    	                    entgeltobj.netzbetreibername = extract(temp2, 'versorgerName',prefix);	                   	                    var marktrollen =extractObj(temp2,'marktrollen',prefix);	                    var index =0;	                   	var marktindex =0;	                    while ((index <= marktrollen.length) && (marktindex !=1)) {	                    	marktindex =  extract(marktrollen[index],'marktrolleID',prefix) 	                    	if (marktindex == 1) {	                    		entgeltobj.bdew = extract(marktrollen[index],'verbandsnummer',prefix)	                    		};	                    		index++;	                    	};	                    		                    entgeltobj.gueltig_von = new Date(extract(op, 'gueltigVon',prefix)+"T00:00:00Z");	                    entgeltobj.gueltig_bis = new Date(extract(op, 'gueltigBis',prefix)+"T00:00:00Z");	                  	                    entgeltobj.abrechnung = myround(extract(op, 'entgeltFuerAbrechnung',prefix));	                    entgeltobj.msb =myround( extract(op, 'entgeltFuerEinbauBetriebWartungMesstechnik',prefix));	                    entgeltobj.mdl = myround(extract(op, 'entgeltFuerMessungUndAblesung',prefix));	                    entgeltobj.abl = myround(extract(op, 'entgeltZaehlerpreisAblesung',prefix));	                    entgeltobj.grundpreis = myround(extract(op, 'grundpreis',prefix));	                    entgeltobj.wirkarbeit = myround(extract(op, 'wirkarbeit',prefix));	                    entgeltobj.wirkarbeitHT = myround(extract(op, 'wirkarbeitHT',prefix));	                    entgeltobj.wirkarbeitNT = myround(extract(op, 'wirkarbeitNT',prefix));	                    entgeltobj.leistung = myround(extract(op, 'leistung',prefix));	                    entgeltobj.datenbereitstellung = extract(op, 'datenbereitstellung',prefix);	                    entgeltobj.kwk = myround(extract(op, 'abgabeKWK',prefix));	                    entgeltobj.blindmehrarbeit = myround(extract(op, 'blindmehrarbeit',prefix));	                    entgeltobj.stromwandler_enthalten = extract(op, 'stromwandlerEnthalten',prefix);	                    entgeltobj.ka_schwachlast = myround(extract(op, 'konzessionsabgabeSchwachlast',prefix));	                    entgeltobj.ka_svk = myround(extract(op, 'konzessionsabgabeSondervertragskunde',prefix));	                    entgeltobj.ka_tarif = myround(extract(op, 'konzessionsabgabeTarifkunde',prefix));	                    entgeltobj.konzessionsabgabe = myround(extract(op,'konzessionsabgabe',prefix));	                    entgeltobj.offshore = myround(extract(op,'offshoreumlage',prefix));	                    entgeltobj.sonderkundenaufschlag = myround(extract(op,'sonderkundenaufschlag',prefix));	                    entgeltobj.gesamtpreis = myround(extract(op, 'gesamtpreis',prefix));	                    entgeltobj.plz = my_plz[k];	                    ret.push(entgeltobj);	                    c++;                    };                };            };        }; 			  //ende der for schleife    }    catch (error) {    	prog.endSession();        ret = []    };  	prog.endSession();    return ret;};function myround(item) {	return (Math.round(item * 100)) / 100;	};function extract(my_op, my_attribute,prefix) {  //  var att = 'ax23:' + my_attribute;   var att = prefix+my_attribute;    return my_op[att][0]['__CDATA'];};function extractObj(my_op,my_attribute,prefix) {	var att =prefix+my_attribute;	return my_op[att];	};